{
  "author" : "Mr.Xie",
  "version" : "1.2.8",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "GoKuM",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "json",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.time.LocalDate"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "matchType" : "REGEX",
        "columnType" : "^enum\\((\\S+\\s){1,}\\S+\\)$",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime(6)",
        "javaType" : "java.time.LocalDateTime"
      } ]
    }
  },
  "template" : {
    "GoKu" : {
      "name" : "GoKu",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\nimport jakarta.validation.Valid;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport jakarta.annotation.Resource;\n\nimport top.zopx.goku.framework.http.annotation.AnnoLog;\nimport top.zopx.goku.framework.http.entity.dto.CollectionEntityDTO;\nimport top.zopx.goku.framework.http.util.validate.constant.ValidGroup;\nimport top.zopx.goku.framework.tools.entity.vo.Page;\nimport top.zopx.goku.framework.tools.entity.vo.Pagination;\nimport top.zopx.goku.framework.tools.entity.wrapper.R;\n\n\nimport $!{tableInfo.savePackageName}.entity.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.entity.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport java.util.List;\n\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} {\n    \n    \n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    @GetMapping\n    public R<Page<$!{tableInfo.name}VO>> getPage(Pagination pagination, $!{tableInfo.name}DTO body) {\n        return R.result(\n                new Page<>(pagination, $!tool.firstLowerCase($tableInfo.name)Service .list(body, pagination))\n        );\n    }\n\n    @GetMapping(\"/list\")\n    public R<List<$!{tableInfo.name}VO>> getList($!{tableInfo.name}DTO body) {\n        return R.result(\n                $!tool.firstLowerCase($tableInfo.name)Service .list(body)\n        );\n    }\n\n    @GetMapping(\"/{id}\")\n    @AnnoLog(value = \"'获取' + #id + '的详细信息'\")\n    public R<$!{tableInfo.name}VO> getByKey(@PathVariable(value = \"id\") Long id) {\n        return R.result($!tool.firstLowerCase($tableInfo.name)Service .get(id));\n    }\n\n    @PostMapping\n    @AnnoLog(value = \"保存\")\n    public R<Boolean> save(@Validated(value = {ValidGroup.Create.class}) @RequestBody $!{tableInfo.name}DTO body) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .save(body));\n    }\n\n    @PutMapping(\"/{id}\")\n    @AnnoLog(value = \"'修改' + #id + '的信息'\")\n    public R<Boolean> updateByKey(@PathVariable(\"id\") Long id, @Validated(value = {ValidGroup.Update.class}) @RequestBody $!{tableInfo.name}DTO body) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .update(body, id));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @AnnoLog(value = \"'删除'+ #id +'数据'\")\n    public R<Boolean> deleteByKey(@PathVariable(\"id\") Long id) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .delete(id));\n    }\n\n\n    @DeleteMapping( \"/batch\" )\n    @AnnoLog(value = \"批量删除\")\n    public R<Boolean> deleteBatch(@RequestBody @Valid CollectionEntityDTO<Long> body) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .delete(body.getData()));\n    }\n    \n    @PostMapping( \"/batch\" )\n    @AnnoLog(value = \"批量保存\")\n    public R<Boolean> save(@Validated(value = {ValidGroup.Create.class}) @RequestBody CollectionEntityDTO<$!{tableInfo.name}DTO> body) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .save(body.getData()));\n    }\n\n}\n"
      }, {
        "name" : "dao.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Repository\")\n\n##保存文件（宏定义）\n#save(\"/repository\", \"Repository.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"repository\")\nimport org.springframework.stereotype.Repository;\nimport top.zopx.goku.framework.jpa.code.repository.BaseRepository;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\n@Repository\npublic interface $!{tableName} extends BaseRepository<$!{tableInfo.name}> {\n}\n\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\n// 继承父类\nimport top.zopx.goku.framework.jpa.code.service.IService;\nimport $!{tableInfo.savePackageName}.entity.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.entity.dto.$!{tableInfo.name}DTO;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$!{tableInfo.name}DTO, $!{tableInfo.name}VO> {\n\n}\n"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport jakarta.annotation.Resource;\nimport org.springframework.stereotype.Service;\nimport $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repository;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.entity.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.entity.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\n// 继承父类\nimport top.zopx.goku.framework.jpa.code.service.impl.BaseServiceImpl;\nimport top.zopx.goku.framework.tools.util.copy.IStructMapping;\nimport org.mapstruct.Mapper;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} \n            extends BaseServiceImpl<$!{tableInfo.name}DTO, $!{tableInfo.name}, $!{tableInfo.name}Repository, $!{tableInfo.name}VO> \n                implements $!{tableInfo.name}Service {\n\n    @Resource\n    private $!{tableInfo.name}Struct $!{tool.firstLowerCase($tableInfo.name)}Struct;\n\n    @Override\n    protected IStructMapping<$!{tableInfo.name}DTO, $!{tableInfo.name}VO, $!{tableInfo.name}> struct() {\n        return $!{tool.firstLowerCase($tableInfo.name)}Struct;\n    }\n\n    @Mapper(componentModel = \"spring\")\n    public interface $!{tableInfo.name}Struct extends IStructMapping<$!{tableInfo.name}DTO, $!{tableInfo.name}VO, $!{tableInfo.name}> {\n    } \n}\n"
      }, {
        "name" : "entity.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Table;\n\nimport top.zopx.goku.framework.jpa.model.EntityModel;\nimport java.io.Serializable;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@Entity\n@Table(name = \"$tableInfo.obj.name\")\npublic class $!{tableInfo.name} extends EntityModel implements Serializable {\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} !=\n'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and\n$!{column.name} != 'isDelete')\n#if(${column.comment})\n\t/**\n\t* ${column.comment}\n\t*/\n#end\n\t@Column(name = \"`$!{column.obj.name}`\")\n\tprivate $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} !=\n'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and\n$!{column.name} != 'isDelete')\n\t#getSetMethod($column)\n#end\n#end\n}"
      }, {
        "name" : "entityVO.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity/vo\", \"VO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity.vo\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\n// 父类继承\nimport top.zopx.goku.framework.http.entity.vo.EntityVO;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\npublic class $!{tableInfo.name}VO extends EntityVO {\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} != 'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and $!{column.name} != 'isDelete')\n    #if(${column.comment})\n    /**\n     * ${column.comment}\n     */\n    #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} != 'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and $!{column.name} != 'isDelete')\n    #getSetMethod($column)\n#end\n#end\n}\n"
      }, {
        "name" : "entityDTO.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity/dto\", \"DTO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity.dto\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\n// 父类继承\nimport top.zopx.goku.framework.http.entity.dto.EntityDTO;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\npublic class $!{tableInfo.name}DTO extends EntityDTO {\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} != 'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and $!{column.name} != 'isDelete')\n    #if(${column.comment})\n    /**\n     * ${column.comment}\n     */\n    #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} != 'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and $!{column.name} != 'isDelete')\n    #getSetMethod($column)\n#end\n#end\n}\n"
      } ]
    },
    "GoKuM" : {
      "name" : "GoKuM",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\nimport jakarta.validation.Valid;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport jakarta.annotation.Resource;\n\nimport top.zopx.goku.framework.http.annotation.AnnoLog;\nimport top.zopx.goku.framework.http.entity.dto.CollectionEntityDTO;\nimport top.zopx.goku.framework.http.util.validate.constant.ValidGroup;\nimport top.zopx.goku.framework.tools.entity.vo.Page;\nimport top.zopx.goku.framework.tools.entity.vo.Pagination;\nimport top.zopx.goku.framework.tools.entity.wrapper.R;\n\n\nimport $!{tableInfo.savePackageName}.entity.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.entity.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport java.util.List;\n\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} {\n    \n    \n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    @GetMapping\n    public R<Page<$!{tableInfo.name}VO>> getPage(Pagination pagination, $!{tableInfo.name}DTO body) {\n        return R.result(\n                new Page<>(pagination, $!tool.firstLowerCase($tableInfo.name)Service .list(body, pagination))\n        );\n    }\n\n    @GetMapping(\"/list\")\n    public R<List<$!{tableInfo.name}VO>> getList($!{tableInfo.name}DTO body) {\n        return R.result(\n                $!tool.firstLowerCase($tableInfo.name)Service .list(body)\n        );\n    }\n\n    @GetMapping(\"/{id}\")\n    @AnnoLog(value = \"'获取' + #id + '的详细信息'\")\n    public R<$!{tableInfo.name}VO> getByKey(@PathVariable(value = \"id\") Long id) {\n        return R.result($!tool.firstLowerCase($tableInfo.name)Service .get(id));\n    }\n\n    @PostMapping\n    @AnnoLog(value = \"保存\")\n    public R<Boolean> save(@Validated(value = {ValidGroup.Create.class}) @RequestBody $!{tableInfo.name}DTO body) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .save(body));\n    }\n\n    @PutMapping(\"/{id}\")\n    @AnnoLog(value = \"'修改' + #id + '的信息'\")\n    public R<Boolean> updateByKey(@PathVariable(\"id\") Long id, @Validated(value = {ValidGroup.Update.class}) @RequestBody $!{tableInfo.name}DTO body) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .update(body, id));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @AnnoLog(value = \"'删除'+ #id +'数据'\")\n    public R<Boolean> deleteByKey(@PathVariable(\"id\") Long id) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .delete(id));\n    }\n\n\n    @DeleteMapping( \"/batch\" )\n    @AnnoLog(value = \"批量删除\")\n    public R<Boolean> deleteBatch(@RequestBody @Valid CollectionEntityDTO<Long> body) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .delete(body.getData()));\n    }\n    \n    @PostMapping( \"/batch\" )\n    @AnnoLog(value = \"批量保存\")\n    public R<Boolean> save(@Validated(value = {ValidGroup.Create.class}) @RequestBody CollectionEntityDTO<$!{tableInfo.name}DTO> body) {\n        return R.status($!tool.firstLowerCase($tableInfo.name)Service .save(body.getData()));\n    }\n\n}\n"
      }, {
        "name" : "dao.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Mapper\")\n\n##保存文件（宏定义）\n#save(\"/mapper\", \"Mapper.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"mapper\")\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.entity.dto.$!{tableInfo.name}DTO;\n\nimport java.util.*;\n\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\n@Mapper\npublic interface $!{tableName} {\n\n    /**\n     * 保存\n     *\n     * @param body 参数信息\n     * @return 是否保存成功\n     */\n    int save($!{tableInfo.name} body);\n\n    /**\n     * 批量保存\n     *\n     * @param data 参数信息\n     * @return 是否保存成功\n     */\n    int saveBatch(Collection<$!{tableInfo.name}> data);\n\n    /**\n     * 修改信息\n     *\n     * @param body 参数信息\n     * @param id   主键\n     * @return 是否修改成功\n     */\n    int update(@Param(\"body\") $!{tableInfo.name} body, @Param(\"id\") Long id);\n\n    /**\n     * 删除信息\n     *\n     * @param id 主键\n     * @return 是否删除成功\n     */\n    int updateIsDeleteToYes(Long id, @Param(\"deleter\") Long deleter);\n\n    /**\n     * 删除信息\n     *\n     * @param data 批量删除\n     * @return 是否删除成功\n     */\n    int updateIsDeleteToYesBatch(@Param(\"data\") Collection<Long> data, @Param(\"deleter\") Long deleter);\n\n    /**\n     * 查看详情\n     *\n     * @param id 主键\n     * @return 详细信息\n     */\n    $!{tableInfo.name} getById(Long id);\n\n    /**\n     * 查看全部\n     *\n     * @param body 查询参数\n     * @param startRow 开始范围\n     * @param endRow   结束范围\n     * @return 列表\n     */\n    List<$!{tableInfo.name}> getList(@Param(\"body\") $!{tableInfo.name}DTO body, @Param(\"startRow\") Long startRow, @Param(\"endRow\") Long endRow);\n}\n\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\n// 继承父类\nimport $!{tableInfo.savePackageName}.entity.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.entity.dto.$!{tableInfo.name}DTO;\nimport top.zopx.goku.framework.tools.entity.vo.Pagination;\n\nimport java.util.*;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} {\n\n\t\n    /**\n     * 保存\n     *\n     * @param body 参数信息\n     * @return 是否保存成功\n     */\n    Boolean save($!{tableInfo.name}DTO body);\n\n    /**\n     * 批量保存\n     *\n     * @param data 参数信息\n     * @return 是否保存成功\n     */\n    Boolean save(Collection<$!{tableInfo.name}DTO> data);\n\n    /**\n     * 修改信息\n     *\n     * @param body 参数信息\n     * @param id   主键\n     * @return 是否修改成功\n     */\n    Boolean update($!{tableInfo.name}DTO body, Long id);\n\n    /**\n     * 删除信息\n     *\n     * @param id 主键\n     * @return 是否删除成功\n     */\n    Boolean delete(Long id);\n\n    /**\n     * 删除信息\n     *\n     * @param data 批量删除\n     * @return 是否删除成功\n     */\n    Boolean delete(Collection<Long> data);\n\n    /**\n     * 查看详情\n     *\n     * @param id 主键\n     * @return 详细信息\n     */\n    $!{tableInfo.name}VO get(Long id);\n\n    /**\n     * 查看全部\n     *\n     * @param body 查询参数\n     * @return 列表\n     */\n    List<$!{tableInfo.name}VO> list($!{tableInfo.name}DTO body);\n\n    /**\n     * 分页\n     *\n     * @param body       查询参数\n     * @param pagination 分页信息\n     * @return 列表\n     */\n    List<$!{tableInfo.name}VO> list($!{tableInfo.name}DTO body, Pagination pagination);\n\n}\n"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport java.time.LocalDateTime;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Optional;\n\nimport com.github.pagehelper.PageInfo;\nimport com.github.pagehelper.page.PageMethod;\nimport jakarta.annotation.Resource;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport top.zopx.goku.framework.tools.entity.vo.Pagination;\nimport top.zopx.goku.framework.tools.exception.BusException;\nimport top.zopx.goku.framework.tools.util.copy.IStructMapping;\nimport top.zopx.goku.framework.http.util.login.UserLoginHelper;\nimport top.zopx.goku.framework.http.constant.ErrorEnum;\nimport org.mapstruct.Mapper;\n\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.entity.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.entity.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport top.zopx.goku.framework.tools.util.id.SnowFlake;\n\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n\n    @Resource\n    private $!{tableInfo.name}Struct $!{tool.firstLowerCase($tableInfo.name)}Struct;\n    @Resource\n    private $!{tableInfo.name}Mapper $!{tool.firstLowerCase($tableInfo.name)}Mapper;\n    @Resource\n    private SnowFlake snowFlake;\n\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)   \n    public Boolean save($!{tableInfo.name}DTO body) {\n        $!{tableInfo.name} entity = $!{tool.firstLowerCase($tableInfo.name)}Struct.copyToT(body);\n        buildToSave(entity);\n        $!{tool.firstLowerCase($tableInfo.name)}Mapper.save(entity);\n        return Boolean.TRUE;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)   \n    public Boolean save(Collection<$!{tableInfo.name}DTO> data) {\n        if (CollectionUtils.isEmpty(data)) {\n            throw new BusException(ErrorEnum.ERROR_CREATE);\n        }\n\n        List<$!{tableInfo.name}> entityList = data.stream()\n                .map(item -> {\n                    $!{tableInfo.name} entity = $!{tool.firstLowerCase($tableInfo.name)}Struct.copyToT(item);\n                    buildToSave(entity);\n                    return entity;\n                })\n                .toList();\n        $!{tool.firstLowerCase($tableInfo.name)}Mapper.saveBatch(entityList);\n        return Boolean.TRUE;\n    }\n\n    /**\n     * 修改信息\n     *\n     * @param body 参数信息\n     * @param id   主键\n     * @return 是否修改成功\n     */\n    @Override\n    @Transactional(rollbackFor = Exception.class)   \n    public Boolean update($!{tableInfo.name}DTO body, Long id) {\n        $!{tableInfo.name} entity = getById(id);\n        $!{tool.firstLowerCase($tableInfo.name)}Struct.copyIgnoreNull(body, entity);\n        entity.setId(id);\n        entity.setUpdater(UserLoginHelper.getUserId());\n        entity.setUpdateTime(LocalDateTime.now());\n        $!{tool.firstLowerCase($tableInfo.name)}Mapper.update(entity, id);\n        return Boolean.TRUE;\n    }\n\n    /**\n     * 删除信息\n     *\n     * @param id 主键\n     * @return 是否删除成功\n     */\n    @Override\n    @Transactional(rollbackFor = Exception.class)   \n    public Boolean delete(Long id) {\n        $!{tool.firstLowerCase($tableInfo.name)}Mapper.updateIsDeleteToYes(id, UserLoginHelper.getUserId());\n        return Boolean.TRUE;\n    }\n\n    /**\n     * 删除信息\n     *\n     * @param data 批量删除\n     * @return 是否删除成功\n     */\n    @Override\n    @Transactional(rollbackFor = Exception.class)   \n    public Boolean delete(Collection<Long> data) {\n        if (CollectionUtils.isEmpty(data)) {\n            throw new BusException(ErrorEnum.ERROR_DELETE);\n        }\n\n        $!{tool.firstLowerCase($tableInfo.name)}Mapper.updateIsDeleteToYesBatch(data, UserLoginHelper.getUserId());\n        return Boolean.TRUE;\n    }\n\n    /**\n     * 查看详情\n     *\n     * @param id 主键\n     * @return 详细信息\n     */\n    @Override\n    public $!{tableInfo.name}VO get(Long id) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Struct.copyToV(getById(id));\n    }\n\n    /**\n     * 查看全部\n     *\n     * @param body 查询参数\n     * @return 列表\n     */\n    @Override \n    public List<$!{tableInfo.name}VO> list($!{tableInfo.name}DTO body) {\n        List<$!{tableInfo.name}> entityList = $!{tool.firstLowerCase($tableInfo.name)}Mapper.getList(body, null, null);\n        return entityList.stream()\n                    .map(item -> $!{tool.firstLowerCase($tableInfo.name)}Struct.copyToV(item))\n                    .toList();\n    }\n\n    /**\n     * 分页\n     *\n     * @param body       查询参数\n     * @param pagination 分页信息\n     * @return 列表\n     */\n    @Override\n    public List<$!{tableInfo.name}VO> list($!{tableInfo.name}DTO body, Pagination pagination) {\n        int currentIndex = Optional.ofNullable(pagination.getCurrentIndex()).orElse(1);\n        int pageSize = Optional.ofNullable(pagination.getPageSize()).orElse(1000);\n        PageInfo<$!{tableInfo.name}> pageInfo =\n                PageMethod.startPage(currentIndex, pageSize)\n                        .doSelectPageInfo(() -> $!{tool.firstLowerCase($tableInfo.name)}Mapper.getList(body, pagination.getStartRow(), pagination.getEndRow()));\n        return buildPage(pageInfo, pagination, currentIndex, pageSize);\n    }\n\n    private List<$!{tableInfo.name}VO> buildPage(PageInfo<$!{tableInfo.name}> pageInfo, Pagination pagination, int currentIndex, int pageSize) {\n        pagination.setTotalCount(pageInfo.getTotal());\n        pagination.setCurrentIndex(currentIndex);\n        pagination.setPageSize(pageSize);\n        return pageInfo.getList()\n                    .stream()\n                    .map(item -> $!{tool.firstLowerCase($tableInfo.name)}Struct.copyToV(item))\n                    .toList();\n    }\n\n    protected $!{tableInfo.name} getById(Long id) {\n        return Optional.ofNullable($!{tool.firstLowerCase($tableInfo.name)}Mapper.getById(id)).orElseThrow(() -> new BusException(ErrorEnum.NOT_ENTITY));\n    }\n\n    private void buildToSave($!{tableInfo.name} entity) {\n        entity.setId(snowFlake.nextId());\n        entity.setCreater(UserLoginHelper.getUserId());\n        entity.setCreateTime(LocalDateTime.now());\n        entity.setIsDelete(0);\n    }\n\n\n    @Mapper(componentModel = \"spring\")\n    public interface $!{tableInfo.name}Struct extends IStructMapping<$!{tableInfo.name}DTO, $!{tableInfo.name}VO, $!{tableInfo.name}> {\n    } \n}\n"
      }, {
        "name" : "entity.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\npublic class $!{tableInfo.name}  implements Serializable {\n#foreach($column in $tableInfo.fullColumn)\n\n#if(${column.comment})\n\t/**\n\t* ${column.comment}\n\t*/\n#end\n\tprivate $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n\t#getSetMethod($column)\n#end\n}"
      }, {
        "name" : "entityVO.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity/vo\", \"VO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity.vo\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\n// 父类继承\nimport top.zopx.goku.framework.http.entity.vo.EntityVO;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\npublic class $!{tableInfo.name}VO extends EntityVO {\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} != 'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and $!{column.name} != 'isDelete')\n    #if(${column.comment})\n    /**\n     * ${column.comment}\n     */\n    #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} != 'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and $!{column.name} != 'isDelete')\n    #getSetMethod($column)\n#end\n#end\n}\n"
      }, {
        "name" : "entityDTO.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity/dto\", \"DTO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity.dto\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\n// 父类继承\nimport top.zopx.goku.framework.http.entity.dto.EntityDTO;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\npublic class $!{tableInfo.name}DTO extends EntityDTO {\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} != 'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and $!{column.name} != 'isDelete')\n    #if(${column.comment})\n    /**\n     * ${column.comment}\n     */\n    #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#if($!{column.name} != 'id' and $!{column.name} != 'creater' and $!{column.name} != 'createTime' and $!{column.name} != 'updater' and $!{column.name} != 'updateTime' and $!{column.name} != 'deleter' and $!{column.name} != 'deleteTime' and $!{column.name} != 'isDelete')\n    #getSetMethod($column)\n#end\n#end\n}\n"
      }, {
        "name" : "dao.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"getById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--查询指定行数据-->\n    <select id=\"getList\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n        \tis_delete = 0\n#foreach($column in $tableInfo.fullColumn)\n    #if($column.obj.name != 'id' and $column.obj.name != 'creater' and $column.obj.name != 'create_time' and $column.obj.name != 'updater' and $column.obj.name != 'update_time' and $column.obj.name != 'deleter' and $column.obj.name != 'delete_time' and $column.obj.name != 'is_delete')\n            <if test=\"body.$!column.name != null#if($column.type.equals(\"java.lang.String\")) and body.$!column.name != ''#end\">\n                and `$!column.obj.name` = #{body.$!column.name}\n            </if>\n#end\n#end\n            <if test=\"startRow != null\">\n                and $!pk.obj.name <![CDATA[ > ]]> #{startRow}\n            </if>\n            <if test=\"endRow != null\">\n                and $!pk.obj.name <![CDATA[ < ]]> #{endRow}\n            </if>\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"save\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.fullColumn)`$!column.obj.name`#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.fullColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"saveBatch\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.fullColumn)`$!column.obj.name`#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"data\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.fullColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"body.$!column.name != null#if($column.type.equals(\"java.lang.String\")) and body.$!column.name != ''#end\">\n                `$!column.obj.name` = #{body.$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <update id=\"updateIsDeleteToYes\">\n        update $!{tableInfo.obj.name} set is_delete = 1, deleter=#{deleter}, delete_time=now() where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <update id=\"updateIsDeleteToYesBatch\">\n        update $!{tableInfo.obj.name} set is_delete = 1, deleter=#{deleter}, delete_time=now() where $!pk.obj.name in\n        (<foreach collection=\"data\" item=\"entity\" separator=\",\">#{entity}</foreach>)\n    </update>\n\n</mapper>\n"
      } ]
    }
  },
  "columnConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @date $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"tbl_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)`$column.obj.name`#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}